// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  email              String              @unique
  imgURL             String?
  first_name         String
  last_name          String
  bio                String?
  safety_details     String?
  lat                Float?
  long               Float?
  postal_code        String?
  points             Int                 @default(0)
  Helper             Request[]           @relation("helper_id")
  Requester          Request[]           @relation("requester_id")
  personal_resources Personal_resource[]
  Sender             Conversation[]      @relation("sender_id")
  Receiver           Conversation[]      @relation("receiver_id")
  reviewsByMe        Review[]            @relation("reviewerId")
  reviewsToMe        Review[]            @relation("personId")
}

model Review {
  id                      Int       @id @default(autoincrement())
  body                    String?
  rating                  Int       @default(1)
  reviewerId              Int
  reviewer                Person    @relation(name: "reviewerId", fields: [reviewerId], references: [id])
  personId                Int
  personBeingReviewed     Person    @relation(name: "personId", fields: [personId], references: [id])
  createdAt               DateTime? @default(now())
}

model Request {
  id                  Int                  @id @default(autoincrement())
  request_details     String
  map_id              String?
  lat                 Float?
  long                Float?
  postal_code         String?
  request_claimed     Boolean              @default(false)
  request_completed   Boolean              @default(false)
  createdAt           DateTime             @default(now())
  time_sensitive      Boolean              @default(false)
  start_time          DateTime?            @default(now())
  end_time            DateTime?            @default(now())
  points_value        Int                  @default(0)
  helper_id           Int?
  requester_id        Int
  category_id         Int
  category            Category             @relation(fields: [category_id], references: [id])
  helper              Person?              @relation(name: "helper_id", fields: [helper_id], references: [id])
  requester           Person               @relation(name: "requester_id", fields: [requester_id], references: [id])
  conversations       Conversation[]
  requested_resources Requested_resource[]
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String
  image   String?
  requests Request[]
}

model Resource {
  id                  Int                  @id @default(autoincrement())
  name                String
  category            String
  detail              String?
  image               String?
  personal_resources  Personal_resource[]
  requested_resources Requested_resource[]
}

model Requested_resource {
  id          Int      @id @default(autoincrement())
  request_id  Int
  resource_id Int
  request     Request  @relation(fields: [request_id], references: [id])
  resource    Resource @relation(fields: [resource_id], references: [id])
}

model Personal_resource {
  id          Int      @id @default(autoincrement())
  person_id   Int
  resource_id Int
  person      Person   @relation(fields: [person_id], references: [id])
  resource    Resource @relation(fields: [resource_id], references: [id])
}

model Conversation {
  id           Int       @id @default(autoincrement())
  helper_id    Int
  requester_id Int
  request_id   Int?
  request      Request?   @relation(fields: [request_id], references: [id])
  sender       Person    @relation(name: "sender_id", fields: [helper_id], references: [id])
  receiver     Person    @relation(name: "receiver_id", fields: [requester_id], references: [id])
  messages     Message[]
}

model Message {
  id              Int          @id @default(autoincrement())
  body            String
  timestamp       DateTime     @default(now())
  sender_id       Int
  conversation_id Int
  conversation    Conversation @relation(fields: [conversation_id], references: [id])
}
